#  perfect foresight model 

init_perfect_foresight:
  CRRA : 2.0           # Coefficient of relative risk aversion
  Rfree : 1.03         # Interest factor on assets
  DiscFac : 0.96       # Intertemporal discount factor
  LivPrb : [0.98]      # Survival probability
  PermGroFac : [1.01]  # Permanent income growth factor
  BoroCnstArt : None   # Artificial borrowing constraint
  MaxKinks : 400       # Maximum number of grid points to allow in cFunc (should be large)
  AgentCount : 10000   # Number of agents of this type (only matters for simulation)
  aNrmInitMean : 0.0   # Mean of log initial assets (only matters for simulation)
  aNrmInitStd : 1.0    # Standard deviation of log initial assets (only for simulation)
  pLvlInitMean : 0.0   # Mean of log initial permanent income (only matters for simulation)
  pLvlInitStd : 0.0    # Standard deviation of log initial permanent income (only matters for simulation)
  PermGroFacAgg : 1.0  # Aggregate permanent income growth factor (only matters for simulation)
  T_age : None         # Age after which simulated agents are automatically killed
  T_cycle : 1          # Number of periods in the cycle for this agent type


# idiosyncratic shocks model

init_idiosyncratic_shocks:
  EXTENDS : [init_perfect_foresight]
  # Parameters for constructing the "assets above minimum" grid
  aXtraMin : 0.001     # Minimum end-of-period "assets above minimum" value
  aXtraMax : 20        # Maximum end-of-period "assets above minimum" value
  aXtraExtra : None    # Some other value of "assets above minimum" to add to the grid, not used
  aXtraNestFac : 3     # Exponential nesting factor when constructing "assets above minimum" grid
  aXtraCount : 48      # Number of points in the grid of "assets above minimum"
  # Parameters describing the income process
  PermShkCount : 7     # Number of points in discrete approximation to permanent income shocks
  TranShkCount : 7     # Number of points in discrete approximation to transitory income shocks
  PermShkStd : [0.1]   # Standard deviation of log permanent income shocks
  TranShkStd : [0.1]   # Standard deviation of log transitory income shocks
  UnempPrb : 0.05      # Probability of unemployment while working
  UnempPrbRet : 0.005  # Probability of "unemployment" while retired
  IncUnemp : 0.3       # Unemployment benefits replacement rate
  IncUnempRet : 0.0    # "Unemployment" benefits when retired
  tax_rate : 0.0       # Flat income tax rate
  T_retire : 0         # Period of retirement (0 --> no retirement)
  # A few other parameters
  BoroCnstArt : 0.0    # Artificial borrowing constraint; imposed minimum level of end-of period assets
  CubicBool : False    # Use cubic spline interpolation when True, linear interpolation when False
  vFuncBool : False    # Whether to calculate the value function during solution


init_lifecycle:
  EXTENDS : [init_idiosyncratic_shocks]
  PermGroFac : [1.01,1.01,1.01,1.01,1.01,1.02,1.02,1.02,1.02,1.02]
  PermShkStd : [0.1,0.2,0.1,0.2,0.1,0.2,0.1,0,0,0]
  TranShkStd : [0.3,0.2,0.1,0.3,0.2,0.1,0.3,0,0,0]
  LivPrb : [0.99,0.9,0.8,0.7,0.6,0.5,0.4,0.3,0.2,0.1]
  T_cycle : 10
  T_retire : 7
  T_age : 11 # Make sure that old people die at terminal age and don't turn into newborns!

# Make a dictionary to specify an infinite consumer with a four period cycle
init_cyclical:
  EXTENDS : [init_idiosyncratic_shocks]
  PermGroFac : [1.082251, 2.8, 0.3, 1.1]
  PermShkStd : [0.1,0.1,0.1,0.1]
  TranShkStd : [0.1,0.1,0.1,0.1]
  LivPrb : 4*[0.98]
  T_cycle : 4

# Define additional parameters for the "kinked R" model

# Make a dictionary to specify a "kinked R" idiosyncratic shock consumer
init_kinked_R:
  EXTENDS : [init_idiosyncratic_shocks]
  Rfree : None       # get rid of constant interest factor ## Deleted in original!
  Rboro : 1.20       # Interest factor on assets when borrowing, a < 0
  Rsave : 1.02       # Interest factor on assets when saving, a > 0 
  BoroCnstArt : None # kinked R is a bit silly if borrowing not allowed
  CubicBool : True   # kinked R is now compatible with linear cFunc and cubic cFunc
  aXtraCount : 48    # ...so need lots of extra gridpoints to make up for it


#  preference shock model 

# Make a dictionary to specify a preference shock consumer
init_preference_shocks :
  EXTENDS: [init_idiosyncratic_shocks]
  PrefShkCount : 12     # Number of points in discrete approximation to preference shock dist
  PrefShk_tail_N : 4    # Number of "tail points" on each end of pref shock dist
  PrefShkStd : [0.30]   # Standard deviation of utility shocks
  aXtraCount : 48
  CubicBool : False     # pref shocks currently only compatible with linear cFunc

# Make a dictionary to specify a "kinky preference" consumer, who has both shocks
# to utility and a different interest rate on borrowing vs saving
init_kinky_pref:
  EXTENDS : [init_kinked_R] # Maybe can EXTEND both, here?
  PrefShkCount : 12
  PrefShk_tail_N : 4
  PrefShkStd : [0.30]


# Define additional parameters for the aggregate shocks model
####################

init_agg_shocks :
  EXTENDS : [init_idiosyncratic_shocks]
  Rfree : None         # Interest factor is endogenous in agg shocks model # del
  CubicBool : None    # Not supported yet for agg shocks model # del
  vFuncBool : None    # Not supported yet for agg shocks model # del
  PermGroFac : [1.0]
  MgridBase : np.array([0.1,0.3,0.6,0.8,0.9,0.98,1.0,1.02,1.1,1.2,1.6,2.0,3.0])  # Grid of capital-to-labor-ratios (factors)
  aXtraCount : 24
  aNrmInitStd : 0.0

init_cobb_douglas:
  PermShkAggCount : 3           # Number of points in discrete approximation to aggregate permanent shock dist
  TranShkAggCount : 3           # Number of points in discrete approximation to aggregate transitory shock dist
  PermShkAggStd : 0.0063        # Standard deviation of log aggregate permanent shocks
  TranShkAggStd : 0.0031        # Standard deviation of log aggregate transitory shocks
  DeprFac : 0.025               # Capital depreciation rate
  CapShare : 0.36               # Capital's share of income
  DiscFac : DiscFac           # Discount factor of perfect foresight calibration
  CRRA : 2.0
  PermGroFacAgg : 1.00          # Aggregate permanent income growth factor
  AggregateL : 1.0
  act_T : 1200
  intercept_prev : 0.0          # Intercept of aggregate savings function
  slope_prev : 1.0              # Slope of aggregate savings function
  verbose : True   # Whether to print solution progress to screen while solving
  T_discard : 200               # Number of simulated "burn in" periods to discard when updating AFunc
  DampingFac : 0.5              # Damping factor when updating AFunc; puts DampingFac weight on old params, rest on new
  max_loops : 20                # Maximum number of AFunc updating loops to allow

# -----------------------------------------------------------------------------
# ----- Define additional parameters for the Markov agg shocks model ----------
# -----------------------------------------------------------------------------

# Make a dictionary to specify a Markov aggregate shocks consumer
init_agg_mrkv_shocks:
  EXTENDS: [init_agg_shocks]
  MrkvArray : np.array([[0.90,0.10],[0.04,0.96]]) # TODO
  

# Make a dictionary to specify a Markov Cobb-Douglas economy
init_mrkv_cobb_douglas:
  EXTENDS : [init_cobb_douglas]
  PermShkAggStd : [0.012,0.006]     # Standard deviation of log aggregate permanent shocks by state
  TranShkAggStd : [0.006,0.003]     # Standard deviation of log aggregate transitory shocks by state
  PermGroFacAgg : [0.98,1.02]       # Aggregate permanent income growth factor
  MrkvArray : np.array([[0.90,0.10],[0.04,0.96]]) # TODO
  MrkvNow_init : 0
  slope_prev : 2*[slope_prev] # TODO
  intercept_prev : 2*[intercept_prev] # TODO


# -----------------------------------------------------------------------------
# ----- Define additional parameters for the persistent shocks model ----------
# -----------------------------------------------------------------------------

# Make a dictionary for the "explicit permanent income" idiosyncratic shocks model
init_explicit_perm_inc:
  EXTENDS : [init_idiosyncratic_shocks]
  pLvlPctiles : np.concatenate(([0.001, 0.005, 0.01, 0.03], np.linspace(0.05, 0.95, num=19),[0.97, 0.99, 0.995, 0.999])) # TODO
  PermGroFac : [1.0] # long run permanent income growth doesn't work yet
  cycles : 0
  aXtraMax : 30
  aXtraExtra : [0.005,0.01]

# Make a dictionary for the "persistent idiosyncratic shocks" model
init_persistent_shocks:
  EXTENDS: [init_explicit_perm_inc]
  PrstIncCorr : 0.98       # Serial correlation coefficient for permanent income

# -----------------------------------------------------------------------------
# ----- Define additional parameters for the medical shocks model -------------
# -----------------------------------------------------------------------------

# Make a dictionary for the "medical shocks" model
init_medical_shocks:
  EXTENDS : [init_persistent_shocks]
  CRRAmed : 3 # 1.5 * 2.0 # Coefficient of relative risk aversion for medical care
  MedShkAvg : [0.001]    # Average of medical need shocks
  MedShkStd : [5.0]      # Standard deviation of (log) medical need shocks
  MedShkCount : 5        # Number of medical shock points in "body"
  MedShkCountTail : 15   # Number of medical shock points in "tail" (upper only)
  MedPrice : [1.5]       # Relative price of a unit of medical care
  aXtraCount : 32
